#summary How to bypass the built in security check of the URL class for https protocol.

=How to bypass SSL security check=
Do you always get the same nerve-racking exception when you try to get the content of a resource available through https protocol? An exception looking like this?
{{{
javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    ...
Caused by: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target2009-02-17 12:49:36 - Check failed for tomcat2
    ...
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
    ...
}}}

*Here is an easy solution but be warned!* The key and certificate system was not created for you to bypass it. But if you just want it to work the easy way, here is how you can do it:

{{{
// Imports: javax.net.ssl.TrustManager, javax.net.ssl.X509TrustManager
try {
    // Create a trust manager that does not validate certificate chains
    final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
        @Override
        public void checkClientTrusted( final X509Certificate[] chain, final String authType ) {
        }
        @Override
        public void checkServerTrusted( final X509Certificate[] chain, final String authType ) {
        }
        @Override
        public X509Certificate[] getAcceptedIssuers() {
    	    return null;
        }
    } };
    
    // Install the all-trusting trust manager
    final SSLContext sslContext = SSLContext.getInstance( "SSL" );
    sslContext.init( null, trustAllCerts, new java.security.SecureRandom() );
    // Create an ssl socket factory with our all-trusting manager
    final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
    
    
    // All set up, we can get a resource through https now:
    final URLConnection urlCon = new URL( "https://someserver.yo/resource" ).openConnection();
    // Tell the url connection object to use our socket factory which bypasses security checks
    ( (HttpsURLConnection) urlCon ).setSSLSocketFactory( sslSocketFactory );
    
    final InputStream input = urlCon.getInputStream();
    int c;
    while ( ( c = input.read() ) != -1 ) {
        // Do something...
    }
    input.close();
} catch ( final Exception e ) {
    e.printStackTrace();
}
}}}

Alternatively you can call
{{{
HttpsURLConnection.setDefaultSSLSocketFactory( sc.getSocketFactory() );
}}}
and after that you don't have to use the `setSSLSocketFactory()` method.